import React, { useState, useEffect, useMemo } from 'react';
import TradingForm from './TradingForm';
import PriceChart from './PriceChart';
import OrderBook from './OrderBook';
import DepthChart from './DepthChart';
import TradeHistory from './TradeHistory';
import './Market.css';

function randomIntFromInterval(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function Market() {
  const [orders, setOrders] = useState([]);
  const [trades, setTrades] = useState([]);
  const [autoTrading, setAutoTrading] = useState(false); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

  // –§—É–Ω–∫—Ü–∏—è –º–∞—Ç—á–∏–Ω–≥–∞
  const matchOrders = (newOrder, currentOrders) => {
    const oppositeSide = newOrder.side === 'buy' ? 'sell' : 'buy';

    // –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ò—â–µ–º –í–°–ï –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ä–¥–µ—Ä–∞ (—Ü–µ–Ω–∞ <= –¥–ª—è –ø–æ–∫—É–ø–∫–∏, —Ü–µ–Ω–∞ >= –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏)
    const matchingOrders = currentOrders.filter((order) => {
      if (order.side !== oppositeSide) return false;

      if (newOrder.side === 'buy') {
        // –î–ª—è –ü–û–ö–£–ü–ö–ò: –∏—â–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ —Å —Ü–µ–Ω–æ–π <= –Ω–∞—à–µ–π —Ü–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏
        return order.price <= newOrder.price;
      } else {
        // –î–ª—è –ü–†–û–î–ê–ñ–ò: –∏—â–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ —Å —Ü–µ–Ω–æ–π >= –Ω–∞—à–µ–π —Ü–µ–Ω–µ –ø—Ä–æ–¥–∞–∂–∏
        return order.price >= newOrder.price;
      }
    });

    // –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ü–†–ò–û–†–ò–¢–ï–¢–£ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    matchingOrders.sort((a, b) => {
      if (newOrder.side === 'buy') {
        // –î–ª—è –ø–æ–∫—É–ø–∫–∏: —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –î–ï–®–ï–í–´–ï –ø—Ä–æ–¥–∞–≤—Ü—ã (—Ü–µ–Ω–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
        return a.price - b.price;
      } else {
        // –î–ª—è –ø—Ä–æ–¥–∞–∂–∏: —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –î–û–†–û–ì–ò–ï –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ (—Ü–µ–Ω–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        return b.price - a.price;
      }
    });

    let remainingAmount = newOrder.amount;
    const executedTrades = [];
    const updatedOrders = [...currentOrders];

    console.log(
      `üîç –ú–∞—Ç—á–∏–Ω–≥: ${newOrder.side} ${newOrder.amount}BTC –ø–æ ${newOrder.price}. –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${matchingOrders.length}`
    );

    // –ò—Å–ø–æ–ª–Ω—è–µ–º –æ—Ä–¥–µ—Ä–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for (let match of matchingOrders) {
      if (remainingAmount <= 0) break;

      const matchIndex = updatedOrders.findIndex((o) => o.id === match.id);
      if (matchIndex === -1) continue;

      const executedAmount = Math.min(
        remainingAmount,
        updatedOrders[matchIndex].amount
      );
      const tradePrice = updatedOrders[matchIndex].price; // –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è = —Ü–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞!

      executedTrades.push({
        id: Date.now() + Math.random(),
        price: tradePrice,
        amount: executedAmount,
        side: newOrder.side,
        timestamp: new Date().toLocaleTimeString(),
        description: `${newOrder.side.toUpperCase()} ${executedAmount}BTC –ø–æ ${tradePrice} (–≤—Å—Ç—Ä–µ—á–Ω—ã–π: ${
          match.side
        } ${match.price})`,
      });

      console.log(`‚ö° –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: ${executedAmount}BTC –ø–æ $${tradePrice}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–º—ã
      if (executedAmount === updatedOrders[matchIndex].amount) {
        updatedOrders.splice(matchIndex, 1);
      } else {
        updatedOrders[matchIndex] = {
          ...updatedOrders[matchIndex],
          amount: updatedOrders[matchIndex].amount - executedAmount,
        };
      }

      remainingAmount -= executedAmount;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω
    if (remainingAmount > 0) {
      updatedOrders.push({
        ...newOrder,
        amount: remainingAmount,
        originalAmount: newOrder.amount, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      });
      console.log(`üí§ –û—Å—Ç–∞—Ç–æ–∫: ${remainingAmount}BTC –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞–∫–∞–Ω`);
    }

    if (executedTrades.length > 0) {
      console.log(`üéØ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: ${executedTrades.length} —Å–¥–µ–ª–æ–∫`);
    }

    return {
      orders: updatedOrders,
      trades: executedTrades,
    };
  };

  const currentPrice = useMemo(() => {
    if (trades.length > 0) {
      return trades[trades.length - 1].price;
    }

    const sellOrders = orders.filter((o) => o.side === 'sell');
    const buyOrders = orders.filter((o) => o.side === 'buy');

    const bestAsk =
      sellOrders.length > 0 ? Math.min(...sellOrders.map((o) => o.price)) : 75;
    const bestBid =
      buyOrders.length > 0 ? Math.max(...buyOrders.map((o) => o.price)) : 75;

    return (bestAsk + bestBid) / 2;
  }, [orders, trades]);

useEffect(() => {
  if (!autoTrading) return;
  
  const interval = setInterval(() => {
    const side = randomIntFromInterval(1, 2) === 1 ? 'buy' : 'sell';
    const amount = randomIntFromInterval(1, 5);
    
    // –£–ú–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –¶–ï–ù:
    let price;
    const aggression = randomIntFromInterval(1, 3); // 1-–ø–∞—Å—Å–∏–≤–Ω—ã–π, 3-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π
    
    if (side === 'buy') {
      if (aggression === 1) {
        price = currentPrice - randomIntFromInterval(3, 6); // –ü–∞—Å—Å–∏–≤–Ω—ã–π - –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã
      } else if (aggression === 2) {
        price = currentPrice - randomIntFromInterval(1, 3); // –£–º–µ—Ä–µ–Ω–Ω—ã–π
      } else {
        price = currentPrice + randomIntFromInterval(1, 2); // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π - –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π!
      }
    } else {
      if (aggression === 1) {
        price = currentPrice + randomIntFromInterval(3, 6); // –ü–∞—Å—Å–∏–≤–Ω—ã–π - –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã
      } else if (aggression === 2) {
        price = currentPrice + randomIntFromInterval(1, 3); // –£–º–µ—Ä–µ–Ω–Ω—ã–π
      } else {
        price = currentPrice - randomIntFromInterval(1, 2); // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π - –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π!
      }
    }
    
    price = Math.max(70, Math.min(85, price)); // –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω

    console.log(`ü§ñ –ê–í–¢–û-–û–†–î–ï–†: ${side} ${amount}BTC –ø–æ $${price} (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å: ${aggression})`);
    handleTrade(side, amount, price);
  }, 2000);
  
  return () => clearInterval(interval);
}, [autoTrading, currentPrice]);

  const handleTrade = (side, amount, price) => {
    const newOrder = {
      id: Date.now(),
      side,
      amount,
      price,
      timestamp: new Date().toLocaleTimeString(),
    };

    setOrders((prevOrders) => {
      const result = matchOrders(newOrder, prevOrders);

      if (result.trades.length > 0) {
        setTrades((prevTrades) => [
          ...result.trades,
          ...prevTrades,
        ]);
      }

      return result.orders;
    });
  };

  const handleAutoTradingToggle = () => {
    setAutoTrading((prev) => !prev);
  };

  return (
    <div className='app'>
      <h1>–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ BTC/USDT</h1>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ */}
      <div className='auto-trading-control'>
        <label className='checkbox-label'>
          <input
            type='checkbox'
            checked={autoTrading}
            onChange={handleAutoTradingToggle}
          />
          <span className='checkmark'></span>
          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è (–¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞)
        </label>
        <div className='auto-trading-status'>
          –°—Ç–∞—Ç—É—Å:{' '}
          <span className={autoTrading ? 'status-active' : 'status-inactive'}>
            {autoTrading ? '–í–ö–õ' : '–í–´–ö–õ'}
          </span>
        </div>
      </div>

      <div className='app-grid'>
        <div className='left-panel'>
          <PriceChart price={currentPrice} />
          <DepthChart orders={orders} currentPrice={currentPrice} />
          <TradeHistory trades={trades} />
          <OrderBook orders={orders} />
        </div>
        <div className='right-panel'>
          <TradingForm currentPrice={currentPrice} onTrade={handleTrade} />
        </div>
      </div>
    </div>
  );
}

export default Market;
